---

- name: Set bashrc file /Debian
  set_fact:
    bashrc_file: "/etc/bash.bashrc"
  when:
    - ansible_os_family == "Debian"

- name: Set bashrc file /RedHat
  set_fact:
    bashrc_file: "/etc/bashrc"
  when:
    - ansible_os_family == "RedHat"


# CIS 1.1.21
- name: "Ensure sticky bit is set on all world-writable directories"
  shell: |
    set -o pipefail
    df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d -perm -0002 2>/dev/null | xargs chmod a+t
  changed_when: no
  failed_when: no

- name: Disable root account
  user:
    name: root
    password_lock: yes
  when: disable_root_user

# CIS 1.4.3
# STIG 010481
- name: Require single user mode password
  template:
    src: rescue.service.j2
    dest: /etc/systemd/system/rescue.service
    owner: 'root'
    group: 'root'
    mode: '0400'

# STIG 020230
- name: Disable Ctrl-Alt-Del Reboot Activation
  systemd:
    name: ctrl-alt-del.target
    masked: yes

- name: "Ensure sudo is installed"
  package:
    name: sudo
    state: present

- name: "Ensure sudo commands use pty"
  lineinfile:
    dest: /etc/sudoers
    regexp: '^Defaults    use_pty'
    line: 'Defaults    use_pty'
    state: present
    validate: '/usr/sbin/visudo -cf %s'

- name: "Ensure sudo log file exists"
  lineinfile:
    dest: /etc/sudoers
    regexp: '^Defaults    logfile="/var/log/sudo.log"'
    line: 'Defaults    logfile="/var/log/sudo.log"'
    state: present
    validate: '/usr/sbin/visudo -cf %s'

# CIS 5.4.1.1
# CIS 5.4.1.2
# CIS 5.4.1.3
# CIS 5.4.1.4
# STIG 010210
# STIG 010230
# STIG 010240
# STIG 010250
# STIG 010260
# STIG 010270
# STIG 010430
# STIG 020240
# STIG 020610
- name: Create login.defs
  template:
    src: 'login.defs.j2'
    dest: '/etc/login.defs'
    owner: 'root'
    group: 'root'
    mode: '0444'

- name: Fix folder permissions
  file:
    path: '{{ item }}'
    state: directory
    mode: '0700'
  with_items:
    - /boot
    - /lib/modules
    - /usr/lib/modules
    - /usr/src
    - "{{ ansible_env.HOME }}"

# CIS 6.1.10
# CIS 6.1.11
- name: Find Unauthorized World-Writable Files
  shell: |
    find -L {{ item }} -perm /go+w -type f -exec chmod go-w {} \;
  with_items:
    - /bin
    - /sbin
    - /usr/bin
    - /usr/local/bin
    - /usr/local/sbin
    - /usr/sbin
  changed_when: no

- name: Disable securetty
  copy:
    dest: /etc/securetty
    group: root
    mode: '0400'
    owner: root
    content: ""
    force: no

# CIS 5.6
- name: Disable su binary for non-sudo users
  file:
    dest: /bin/su
    group: root
    mode: '0750'
    owner: root

# CIS 5.6
- name: "Ensure access to the su command is restricted | Setting pm_wheel to use_uid"
  lineinfile:
    state: present
    dest: /etc/pam.d/su
    regexp: '^(#)?auth\s+required\s+pam_wheel\.so'
    line: 'auth           required        pam_wheel.so use_uid'

# CIS 5.6
- name: "Ensure access to the su command is restricted | wheel group contains root"
  user:
    name: root
    groups: wheel

- name: "Find all sudoers files."
  command: "find /etc/sudoers /etc/sudoers.d/ -type f ! -name '*~' ! -name '*.*'"
  check_mode: no
  changed_when: no
  failed_when: no
  register: sudoers_files

# STIG 010340
- name: Users must provide a password for privilege escalation
  replace:
    path: "{{ item }}"
    regexp: '^([^#].*)NOPASSWD(.*)'
    replace: '\1PASSWD\2'
    validate: '/usr/sbin/visudo -cf %s'
  with_items: "{{ sudoers_files.stdout_lines }}"
  when: not permit_sudo_nopasswd

# STIG 010350
- name: Users must re-authenticate for privilege escalation
  replace:
    path: "{{ item }}"
    regexp: '^([^#].*)!authenticate(.*)'
    replace: '\1authenticate\2'
    validate: '/usr/sbin/visudo -cf %s'
  with_items: "{{ sudoers_files.stdout_lines }}"

- name: Update the profiles file with personal variables
  lineinfile:
    backup: yes
    line: '{{ item }}'
    path: /etc/profile
    regexp: '{{ item }}'
    state: present
  with_items:
    - ulimit -S -c 0

# CIS 5.4.4
# STIG 021040
- name: Ensure default user umask is 027 or more restrictive
  replace:
    path: /etc/profile
    regexp: '(^\s+umask) 002'
    replace: '\1 027'
  with_items:
    - "{{ bashrc_file }}"
    - /etc/profile

# CIS 5.4.4
# STIG 021040
- name: "Set umask {{ bashrc_file }}"
  replace:
    path: "{{ bashrc_file }}"
    regexp: 'umask.*022$'
    replace: 'umask 027'
    backup: yes

# STIG 010200
- name: "The PAM system service must be configured to store only encrypted representations of passwords."
  pamd:
    name: system-auth
    state: "{{ item.state }}"
    type: password
    control: sufficient
    module_path: pam_unix.so
    module_arguments: "{{ item.args }}"
  with_items:
    - state: args_present
      args:
        - "sha512"
    - state: args_absent
      args:
        - "md5"
        - "bigcrypt"
        - "sha256"
        - "blowfish"

# STIG 010320
# STIG 010330
- name: |
        "Accounts subject to three unsuccessful login attempts within 15 minutes must be locked for the maximum configurable period."
        "If three unsuccessful logon attempts within 15 minutes occur the associated account must be locked."
  pamd:
    name: "{{ item }}"
    state: before
    type: auth
    control: sufficient
    module_path: pam_unix.so
    new_type: auth
    new_control: required
    new_module_path: pam_faillock.so
    module_arguments: "preauth silent audit deny={{ pam_faillock_deny }}{{ (pam_faillock_fail_for_root) | ternary(' even_deny_root ',' ') }}fail_interval={{ pam_faillock_fail_interval }} unlock_time={{ pam_faillock_unlock_time }}"
  with_items:
    - "system-auth"
    - "password-auth"

# STIG 010330
- name: "If three unsuccessful logon attempts within 15 minutes occur the associated account must be locked."
  pamd:
    name: "{{ item }}"
    state: after
    type: auth
    control: sufficient
    module_path: pam_unix.so
    new_type: auth
    new_control: "[default=die]"
    new_module_path: pam_faillock.so
    module_arguments: "authfail audit deny={{ pam_faillock_deny }}{{ (pam_faillock_fail_for_root) | ternary(' even_deny_root ',' ') }}fail_interval={{ pam_faillock_fail_interval }} unlock_time={{ pam_faillock_unlock_time }}"
  with_items:
    - "system-auth"
    - "password-auth"

# STIG 010330
- name: "If three unsuccessful logon attempts within 15 minutes occur the associated account must be locked."
  pamd:
    name: "{{ item }}"
    state: before
    type: account
    control: required
    module_path: pam_unix.so
    new_type: account
    new_control: required
    new_module_path: pam_faillock.so
  with_items:
    - "system-auth"
    - "password-auth"

# STIG 040160
- name: "Ensure default user shell timeout is 900 seconds or less | {{ bashrc_file }}"
  lineinfile:
    state: present
    dest: "{{ bashrc_file }}"
    create: yes
    regexp: "^TMOUT="
    line: "TMOUT={{ shell_timeout_sec }} ; export TMOUT"
    owner: 'root'
    group: 'root'
    mode: '0444'

- name: Ensure default user shell timeout is 900 seconds or less | /etc/profile
  lineinfile:
    state: present
    dest: /etc/profile
    create: yes
    regexp: "^TMOUT="
    line: "TMOUT={{ shell_timeout_sec }} ; export TMOUT"
    owner: 'root'
    group: 'root'
    mode: '0444'

- name: Ensure default user shell timeout is 900 seconds or less | /etc/profile.d/timeout.sh
  lineinfile:
    state: present
    dest: /etc/profile.d/tmout.sh
    create: yes
    regexp: "^TMOUT="
    line: "TMOUT={{ shell_timeout_sec }} ; export TMOUT"
    owner: 'root'
    group: 'root'
    mode: '0444'

# CIS 5.3.1
# CIS 5.3.2
# CIS 5.3.3
# CIS 5.3.4
# STIG 010120
# STIG 010130
# STIG 010140
# STIG 010150
# STIG 010160
# STIG 010170
# STIG 010180
# STIG 010190
# STIG 010280
- name: "Ensure password creation requirements are configured"
  lineinfile:
    state: present
    dest: /etc/security/pwquality.conf
    regexp: '^{{ item.key }}'
    line: '{{ item.key }} = {{ item.value }}'
  with_items:
    - {key: dcredit, value: -1}
    - {key: difok, value: 8}
    - {key: lcredit, value: -1}
    - {key: maxclassrepeat, value: 4}
    - {key: maxrepeat, value: 3}
    - {key: minclass, value: 4}
    - {key: minlen, value: 15}
    - {key: ocredit, value: -1}
    - {key: ucredit, value: -1}

# STIG 010119
- name: "Ensure When passwords are changed or new passwords are established, pwquality must be used"
  lineinfile:
    create: yes
    dest: /etc/pam.d/passwd
    line: password required pam_pwquality.so retry=3
    regexp: '^#?password required pam_pwquality.so retry'
    mode: '0444'
    group: 'root'
    owner: 'root'

- name: "Ensure lockout for failed password attempts is configured | Add deny count and unlock time for preauth"
  lineinfile:
    dest: "/etc/pam.d/{{ item }}"
    state: present
    line: "auth        required      pam_faillock.so preauth audit silent deny=5 unlock_time=900"
    insertafter: '^#?auth ?'
  loop:
    - "system-auth"
    - "password-auth"

# STIG 010310
- name: "Ensure inactive password lock is 30 days or less"
  lineinfile:
    path: /etc/default/useradd
    regexp: '^INACTIVE='
    line: "INACTIVE=30"
    state: present

- name: Remove group/others from user directory
  shell: |
    find {{ ansible_env.HOME }} -type d -exec chmod go-rwx {} \;
  changed_when: no

- name: Create limits.d-directory
  file:
    group: root
    mode: '0755'
    owner: root
    path: /etc/security/limits.d
    state: directory

# CIS 1.5.1
- name: Create ulimit hardening file
  pam_limits:
    dest: /etc/security/limits.d/hardening.conf
    domain: '*'
    limit_item: core
    limit_type: "{{ item }}"
    value: '0'
  with_items:
    - soft
    - hard

# STIG 040000
- name: Limit max number of concurrent logins
  pam_limits:
    dest: /etc/security/limits.d/hardening.conf
    domain: '*'
    limit_item: maxlogins
    limit_type: hard
    value: '10'

# CIS 1.4.1
# CIS 6.1.2
# CIS 6.1.3
# CIS 6.1.4
# CIS 6.1.5
# CIS 6.1.6
# CIS 6.1.7
# CIS 6.1.8
# CIS 6.1.9
# STIG 020900
- name: Change files ownership to restrict access
  file:
    group: '{{ item.group }}'
    mode: '{{ item.mode }}'
    owner: '{{ item.owner }}'
    path: '{{ item.path }}'
  with_items:
    - {path: /etc/group, owner: root, group: root, mode: '0644'}
    - {path: /etc/group-, owner: root, group: root, mode: '0644'}
    - {path: /etc/gshadow, owner: root, group: root, mode: '0000'}
    - {path: /etc/login.defs, owner: root, group: root, mode: '0444'}
    - {path: /etc/passwd, owner: root, group: root, mode: '0644'}
    - {path: /etc/passwd-, owner: root, group: root, mode: '0644'}
    - {path: /etc/security/limits.d/hardening.conf, owner: root, group: root, mode: '0440'}
    - {path: /etc/shadow, owner: root, group: root, mode: '0000'}
    - {path: /etc/shadow-, owner: root, group: root, mode: '0000'}
    - {path: /etc/sudoers, owner: root, group: root, mode: '0000'}
    - {path: /etc/sysctl.conf, owner: root, group: root, mode: '0400'}
    - {path: /etc/grub2.cfg, owner: root, group: root, mode: '0640'}

# CIS 5.2.1
# CIS 6.1.1
# STIG 020900
# STIG 040410
# STIG 040420
- name: Change dirs ownership to restrict access
  file:
    group: '{{ item.group }}'
    mode: '{{ item.mode }}'
    owner: '{{ item.owner }}'
    path: '{{ item.path }}'
    recurse: yes
  with_items:
    - {path: /etc/audit, owner: root, group: root, mode: 'go='}
    - {path: /etc/grub.d, owner: root, group: root, mode: 'go='}
    - {path: /etc/modprobe.d, owner: root, group: root, mode: 'go='}
    - {path: /etc/modules-load.d, owner: root, group: root, mode: 'go='}
    - {path: /etc/rsyslog.d, owner: root, group: root, mode: 'go='}
    - {path: /etc/ssh, owner: root, group: root, mode: 'go='}
    - {path: /etc/sudoers.d, owner: root, group: root, mode: 'go='}
    - {path: /etc/sysconfig, owner: root, group: root, mode: 'go='}
    - {path: /etc/sysctl.d, owner: root, group: root, mode: 'go='}

- name: Restrict var log access
  command: |
    find /var/log -type f -exec chmod -c g-wx,o-rwx "{}" + -o -type d -exec chmod -c g-wx,o-rwx "{}" +
  register: chmod_result
  changed_when: "chmod_result.stdout != \"\""


...
